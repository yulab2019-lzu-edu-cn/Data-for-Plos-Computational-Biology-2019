load DTI_gunter
% Network properties and hurst exponent for DTI+GH model, the final output
% pp is a x*y*z averaged network properties matrix, where
% x        model thresholds tested
% y        data thresholds tested
% z        six network topological properties we analysed in the order of:
% global efficiency, local efficiency, characteristic path
% length,clustering coefficient, connection strength and sparsity.
%
% the first row of hurst is the hurst exponent at corresponding Tm


nj = 100;                   %simulation times
nk = 10;                    %time windows in each simulation
%nj*nk = total times to caculate Network properties and hurst exponent for
%the model

ntc2 = 2020;
dtw = 200;                 %length of time window for each caculation

%model&excitation threshold Tm vector
tm = [0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.475 0.5 0.52 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1];

%data&connection threshold Td vector
ndm = 20;
tdm = linspace(0.09,0.11,ndm);


pp = zeros(6,ndm,length(tm));
hurst(2,:) = tm;
for i = 1:length(tm)

    tt = tm(1,i);
    output0 = zeros(6,(nj*nk),ndm);
    hh0 = zeros(1,nj*nk);
    for j = 1:nj
        D=GHmodel_mex(tt,0.995,0.98,55,DTI_gunter);          %time series of the GH model
        
        D(D<=0)=0;
        cc0=zeros(300001,90);
        for kk=1:90
            cc0(:,kk)=conv(D(:,kk),HRFunction(),'same'); %convolved with a hemodynamic response function
        end
        
        
        %The time series generated by the convolution is too smooth to do
        %hurst exponent analysis, so we pick one data point from every 140
        %steps, each 200*90 time series matrix is generated by a 28000*90
        %matrix wich has the same length as what we get while estimating the
        %branching parameter.
        
        cc = zeros(ntc2,90);
        for tcc2 = 1:ntc2
            tw = (tcc2-1)*140+10000;
            cc(tcc2,:) = cc0(tw,:);
        end
        
        hh = zeros(1,nk);
        for k = 1:nk
            tw = 1+(k-1).*dtw;
            corrm = corrcoef(cc(tw:(tw+dtw-1),:));

            % Hurst exponents were calculated for each mean BOLD time series
            cch = mean(cc(tw:(tw+dtw-1),:),2);
            hh(k) = HurstCompute(cch);
            
            % fisher z-transformation
            corrm = log((1+corrm)./(1-corrm))/2;
            for l = 1:90
                corrm(l,l) = 1;
            end
            
            for m = 1:ndm
                td = tdm(m);
                
                % network properties
                [output(1,1),output(2,1),output(3,1),output(4,1),output(5,1),output(6,1)] = netprop(corrm,td);
                output0(:,(j-1)*nk+k,m) = output;
            end
        end
                hh0(:,((j-1)*nk+1):j*nk) = hh(:,:);
    
    end
    
    
    
    for m = 1:ndm
        output00 = output0(:,:,m);
        for n = 1:6
            pp(n,m,i) = mean(output00(n,:));  %averaged networkproperties at each Td and Tm
        end
    end
    hurst(1,i) = mean(hh0);
end
